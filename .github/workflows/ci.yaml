name: CI

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  # lint: # Turn on when linting issues are resolved
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.9"

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -e .[all]

  #     - name: Lint code
  #       run: |
  #         ruff check .

  test:
    # needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: sudo apt-get install -y graphviz rsync curl

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip packaging setuptools twine
          pip install --upgrade -e .[all]

      - name: Unit tests
        run: |
          pytest \
            --cov=autosubmit --cov-config=.coveragerc \
            --cov-report=xml:test/coverage.xml --cov-append \
            test/unit

      - name: Coverage report
        run: |
          coverage xml
          coverage report

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage_unit_py-${{ matrix.python-version }}
          path: coverage.xml
          retention-days: 7

  test-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: sudo apt-get install -y curl git graphviz rsync

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip packaging setuptools twine
          pip install --upgrade -e .[all]

      - name: Set up Git
        run: |
          # From: https://stackoverflow.com/questions/62960533/how-to-use-git-commands-during-a-github-action
          # Set up dummy configuration for integration tests.
          git --version
          git config --global user.email "test@bsc.es"
          git config --global user.name "GitHub Actions"

      # In GitHub Actions we run all the integration tests, including those that require
      # dependencies such as Docker (see `-m ''`, which means all markers). Read the
      # CONTRIBUTING.md file for details how to set up your environment to run these.
      - name: Integration tests
        run: |
          pytest \
            --cov=autosubmit --cov-config=.coveragerc \
            --cov-report=xml:test/coverage.xml --cov-append \
            test/integration \
            -m 'not slurm'

      - name: Coverage report
        run: |
          coverage xml
          coverage report

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage_integration_py-${{ matrix.python-version }}
          path: coverage.xml
          retention-days: 7

  test-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: sudo apt-get install -y curl graphviz rsync

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip packaging setuptools twine
          pip install --upgrade -e .[all]

      # Run regression tests
      - name: Regression tests
        run: |
          pytest \
            --cov=autosubmit --cov-config=.coveragerc \
            --cov-report=xml:test/coverage.xml --cov-append \
            test/regression \
            -m ''

      - name: Coverage report
        run: |
          coverage xml
          coverage report

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage_regression_py-${{ matrix.python-version }}
          path: coverage.xml
          retention-days: 7

  test-slurm:
    runs-on: ubuntu-latest
    services:
      slurm:
        image: autosubmit/slurm-openssh-container:25-05-0-1
        ports:
          - 2222:2222
        options: --rm -it --cgroupns=host --privileged --volume /sys/fs/cgroup:/sys/fs/cgroup:rw --hostname slurmctld --name slurm-container

    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Copy SSH access key
        run: |
          docker cp slurm-container:/root/.ssh/container_root_pubkey /tmp/container_root_pubkey
          chmod 600 /tmp/container_root_pubkey

      - name: Configure SSH host
        run: |
          sudo bash -c 'mkdir /home/runner/.ssh/'
          sudo bash -c 'echo -e $"Host localDocker\n  HostName localhost\n  User root\nStrictHostKeyChecking no\n UserKnownHostsFile /dev/null\n  IdentityFile /tmp/container_root_pubkey\n  Port 2222\n   ForwardX11 yes" >> /home/runner/.ssh/config'

      - name: Run sinfo over SSH on SLURM container
        run: |
          ssh localDocker -p 2222 -i /tmp/container_root_pubkey sinfo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: sudo apt-get install -y curl git graphviz rsync

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip packaging
          pip install --upgrade -e .[all]

      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov pytest-xdist
      
      - name: Set up Git
        run: |
          # From: https://stackoverflow.com/questions/62960533/how-to-use-git-commands-during-a-github-action
          # Set up dummy configuration for integration tests.
          git --version
          git config --global user.email "test@bsc.es"
          git config --global user.name "GitHub Actions"

      - name: Integration tests
        run: |
          pytest \
            --cov=autosubmit --cov-config=.coveragerc \
            --cov-report=xml:test/coverage.xml --cov-append \
            test/integration \
            -m 'slurm'

  test-misc:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    strategy:
      matrix:
        python-version: [ "3.10" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip packaging setuptools twine
          # To validate CFF citation files.
          python -m pip install cffconvert

      - name: Validate citation file
        run: |
          cffconvert --validate -i CITATION.cff

  coverage:
    needs: [test, test-integration, test-regression, test-slurm]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4

      - name: Codecov upload
        uses: codecov/codecov-action@v5
        with:
          name: ${{ github.workflow }}
          flags: fast-tests
          fail_ci_if_error: true
          verbose: true
          # Token not required for public repos, but avoids upload failure due
          # to rate-limiting (but not for PRs opened from forks)
          token: ${{ secrets.CODECOV_TOKEN }}
